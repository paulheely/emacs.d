#+TITLE: Emacs configuration file
#+AUTHOR: Paul Heely
#+BABEL: :cache yes
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \usepackage{inconsolata}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+PROPERTY: header-args :tangle yes


* Credit
  Original files that form the basis of this customized version
  from Lars Tveito's GitHub repository, [[https://github.com/larstvei/dot-emacs.git]].
   
  Additional ideas stolen from:
  - http://doc.norang.ca/org-mode.html
  - https://github.com/howardabrams/dot-files
  
* About

  An attempt to try org-mode with tangle to keep my emacs configuration well documented.

* Meta
** Tangle init.org
  All changes to the configuration should be done in =init.org=, *not* in
  =init.el=. Any changes in the =init.el= will be overwritten by saving
  =init.org=. The =init.el= in this repo should not be tracked by git, and
  is replaced the first time Emacs is started (assuming it has been renamed
  to =~/.emacs.d=).

  Emacs can't load =.org=-files directly, but =org-mode= provides functions
  to extract the code blocks and write them to a file. There are multiple
  ways of handling this; like suggested by [[http://emacs.stackexchange.com/questions/3143/can-i-use-org-mode-to-structure-my-emacs-or-other-el-configuration-file][this StackOverflow post]], one
  could just use =org-babel-load-file=, but I had problems with
  byte-compilation. Previously I tracked both the =org.=- and =el.=-files,
  but the git commits got a little messy. So here is a new approach.

  When this configuration is loaded for the first time, the ~init.el~ is
  the file that is loaded. It looks like this:

  #+BEGIN_SRC emacs-lisp :tangle no
  ;; This file replaces itself with the actual configuration at first run.

  ;; We can't tangle without org!
  (require 'org)
  ;; Open the configuration
  (find-file (concat user-emacs-directory "init.org"))
  ;; tangle it
  (org-babel-tangle)
  ;; load it
  (load-file (concat user-emacs-directory "init.el"))
  ;; finally byte-compile it
  (byte-compile-file (concat user-emacs-directory "init.el"))
  #+END_SRC

  It tangles the org-file, so that this file is overwritten with the actual
  configuration.

  There is no reason to track the =init.el= that is generated; by running
  the following command =git= will not bother tracking it:

  #+BEGIN_SRC sh :tangle no
  git update-index --assume-unchanged init.el
  #+END_SRC

  If one wishes to make changes to the repo-version of =init.el= start
  tracking again with:

  #+BEGIN_SRC sh :tangle no
  git update-index --no-assume-unchanged init.el
  #+END_SRC

  The =init.el= should (after the first run) mirror the source blocks in
  the =init.org=. We can use =C-c C-v t= to run =org-babel-tangle=, which
  extracts the code blocks from the current file into a source-specific
  file (in this case a =.el=-file).

  To avoid doing this each time a change is made we can add a function to
  the =after-save-hook= ensuring to always tangle and byte-compile the
  =org=-document after changes.

  This block does not currently work becase I'm using stow to link in my 
  config files and the actaul path to this file does not match up.
  
  #+BEGIN_SRC emacs-lisp :tangle no
  (defun tangle-init ()
    "If the current buffer is 'init.org' the code-blocks are
  tangled, and the tangled file is compiled."
    (when (equal (buffer-file-name)
                 (expand-file-name (concat user-emacs-directory "init.org")))
      ;; Avoid running hooks when tangling.
      (let ((prog-mode-hook nil))
        (org-babel-tangle)
        (byte-compile-file (concat user-emacs-directory "init.el")))))

        (add-hook 'after-save-hook 'tangle-init)
  #+END_SRC

* Package Control
** Package Manager
   Load some additional repos to pull packages from
   #+BEGIN_SRC emacs-lisp
     (require 'package)
     (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
     (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
     
     (package-initialize)
     ;; run manually when needed, doing at startup slows down the show too much
     ;; (package-refresh-contents)
   #+END_SRC

** Use-Package
   =use-package= makes it easy to install and lazy load other packages
   
   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))
     
     (require 'use-package)
   #+END_SRC

* Visual
  Put some interesting stuff here....
  #+BEGIN_SRC emacs-lisp
    (use-package leuven-theme
     :ensure t
     :config
     (load-theme 'leuven t))
  #+END_SRC

* General Settings
** Alarm Bells
   #+BEGIN_SRC emacs-lisp
     (setq ring-bell-function 'ignore)
   #+END_SRC

** Autosaves & Backup Files
   To reduce noise, put autosaves and backups into a single directory
   #+BEGIN_SRC emacs-lisp
   (defvar emacs-autosave-directory
     (concat user-emacs-directory "autosaves/")
     "This variable dictates where to put auto saves. It is set to a
     directory called autosaves located wherever your .emacs.d/ is
     located.")
   #+END_SRC

   Create the autosaves directory if it does not exist

   #+BEGIN_SRC emacs-lisp
   (when (not (file-exists-p emacs-autosave-directory))
     (message "Make directory: %s" emacs-autosave-directory)
     (make-directory emacs-autosave-directory))
   #+END_SRC
   

   Sets all files to be backed up and auto saved in a single directory.

   #+BEGIN_SRC emacs-lisp
   (setq backup-directory-alist
         `((".*" . ,emacs-autosave-directory))
         auto-save-file-name-transforms
         `((".*" ,emacs-autosave-directory t)))
   #+END_SRC

** Simplify yes-or-no
   #+BEGIN_SRC emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

** Emacs customizations
   Save customizaitons made through Emacs into their own file
   #+BEGIN_SRC emacs-lisp
   (setq custom-file (concat user-emacs-directory "custom.el"))
   (when (file-exists-p custom-file)
     (load custom-file))
   #+END_SRC

** Load Private Setting 
   I keep some stuff out of git and/or specific to the system I'm running on, e.g. work vs personal computer
   #+BEGIN_SRC emacs-lisp
     (add-hook
       'after-init-hook
       (lambda ()
         (let ((private-file (concat user-emacs-directory "private.el")))
	   (when (file-exists-p private-file)
	     (load-file private-file)))))
   #+END_SRC

** No Tabs
   Tabs in source are bad, but presrve the default of 8. Most modes will override with mode specific values
   
   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)
     (setq tab-width 8)
   #+END_SRC

   Indent then do completions
   
   #+BEGIN_SRC
     (setq-default tab-always-indent 'complete)
   #+END_SRC

** Modes
   Turn some stuff off
   
   #+BEGIN_SRC emacs-lisp
     (dolist (mode 
               '(tool-bar-mode
                 scroll-bar-mode
                 blink-cursor-mode))
       (funcall mode 0))
   #+END_SRC

   Turn some stuff on
   
   #+BEGIN_SRC emacs-lisp
     (dolist (mode 
               '(column-number-mode
                 delete-selection-mode
                 show-paren-mode))
       (funcall mode 1))
   #+END_SRC

** Shell Execution Path
   When on Mac pull in my correct path so external commands work
   
   #+BEGIN_SRC emacs-lisp
     (use-package exec-path-from-shell
       :ensure t
       :if (memq window-system '(mac ns))
       :config
         (exec-path-from-shell-initialize))
   #+END_SRC

** Dired Mode
   #+BEGIN_SRC emacs-lisp :tangle no
   (use-package dired
     :config
       (setq dired-use-ls-dired t
             insert-directory-program "/usr/local/bin/gls"
             dired-listing-switches "-ahlr"))
   #+END_SRC

** E-mail address 
  Set my email based on login in name, pheely is only used for work
  
  #+BEGIN_SRC emacs-lisp
  (if (equal "pheely" user-login-name)
    (setq user-mail-address "pheely@amazon.com")
    (setq user-mail-address "paul@paulheely.com"))
  #+END_SRC

** Fill Mode
   #+BEGIN_SRC emacs-lisp
     (setq-default fill-column 80)
     (add-hook 'text-mode-hook 'turn-on-auto-fill)
   #+END_SRC

* Global Shortcuts
  #+BEGIN_SRC emacs-lisp
    (global-set-key "\C-cg" (lambda () (interactive) (find-file "~/git/gtd/gtd.org")))
    (global-set-key "\C-ci" (lambda () (interactive) (find-file "~/git/gtd/inbox.org")))
    (global-set-key "\C-ce" (lambda () (interactive) (find-file "~/.emacs.d/init.org")))
    (global-set-key "\C-cd" (lambda () (interactive) (dired "~/Documents/Docs/_Archive/2020/_Drafts")))
  #+END_SRC

* Mode Configuration
** YAML
  #+BEGIN_SRC emacs-lisp
    (use-package yaml-mode
      :ensure t)
  #+END_SRC

** Markdown
  #+BEGIN_SRC emacs-lisp
    (use-package markdown-mode
      :ensure t)
  #+END_SRC

** Python
*** Virtial Environments
  On OSX to setup for virtual environments
 
  #+BEGIN_SRC shell :tangle no
    brew install pyenv pyenv-virtualenv pyenv-virtualenvwrapper
    pip3 install virtualenv
  #+END_SRC
  
  #+BEGIN_SRC emacs-lisp 
    (use-package python
      :mode ("\\.py\\'" . python-mode)
      :interpreter ("python3" . python-mode)
      
      :init (setq-default indent-tabs-mode nil)
      
      :config
        (setq python-indent-offset 4)
        (add-hook 'python-mode-hook 'smartparens-mode)
        (add-hook 'python-mode-hook 'color-identifiers-mode))
  #+END_SRC

** Org Mode
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))

    (use-package org 
      :ensure t)

    ;; Standard key bindings
    (global-set-key "\C-cl" 'org-store-link)
    (global-set-key "\C-ca" 'org-agenda)
    (global-set-key "\C-cc" 'org-capture)

    (setq org-agenda-files '("~/git/gtd/inbox.org"
                             "~/git/gtd/gtd.org"
                             "~/git/gtd/tickler.org"))

    (setq org-capture-templates '(("t" "Todo [inbox]" entry
                                    (file+headline "~/git/gtd/inbox.org" "Tasks")
                                    "* TODO %i%?")
                                  ("T" "Tickler" entry
                                    (file+headline "~/git/gtd/tickler.org" "Tickler")
                                    "* %i%? \n %U")))

    (setq org-refile-targets '(("~/git/gtd/gtd.org" :maxlevel . 3)
                               ("~/git/gtd/someday.org" :level . 1)
                               ("~/git/gtd/tickler.org" :maxlevel . 2)))

    (setq org-todo-keywords '((sequence "TODO(t)" "Next(n)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))    

    ; allow creation of parent tasks
    (setq org-refile-allow-creating-parent-nodes 'confirm)

    ; only show next actions
    (setq org-agenda-custom-commands
      '(("D" "Done" todo "DONE")
        ("N" "Next" todo "NEXT")))
        
    ; add some priorites so that the usual A, B, C can be used
    ; and set the default to D so non prioritized items fall to the 
    ; bottom of the egenda
    (setq org-lowest-priority ?D)
    (setq org-default-priority ?D)
  #+END_SRC

** Magic Git
   #+BEGIN_SRC emacs-lisp
   (use-package magit
     :ensure t
     :bind (("C-x g" . magit-status)))
   #+END_SRC

* Code Snippets
** Reformat Buffer
   #+BEGIN_SRC emacs-lisp
     (defun pmh/indent-buffer ()
       (interactive)
       (save-excursion
         (indent-region (point-min) (point-max) nil)))
     ;; (global-set-key [f12] 'indent-buffer)
   #+END_SRC
