#+TITLE: Emacs configuration file
#+AUTHOR: Paul Heely
#+BABEL: :cache yes
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \usepackage{inconsolata}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+PROPERTY: header-args :tangle yes


* Credit
  Original files that form the basis of this customized version were downloaded from Lars Tveito's GitHub repository, [[https://github.com/larstvei/dot-emacs.git]].
  
* About

  An attempt to try org-mode with tangle to keep my emacs configuration well documented.

* Meta
   
  All changes to the configuration should be done in =init.org=, *not* in
  =init.el=. Any changes in the =init.el= will be overwritten by saving
  =init.org=. The =init.el= in this repo should not be tracked by git, and
  is replaced the first time Emacs is started (assuming it has been renamed
  to =~/.emacs.d=).

  Emacs can't load =.org=-files directly, but =org-mode= provides functions
  to extract the code blocks and write them to a file. There are multiple
  ways of handling this; like suggested by [[http://emacs.stackexchange.com/questions/3143/can-i-use-org-mode-to-structure-my-emacs-or-other-el-configuration-file][this StackOverflow post]], one
  could just use =org-babel-load-file=, but I had problems with
  byte-compilation. Previously I tracked both the =org.=- and =el.=-files,
  but the git commits got a little messy. So here is a new approach.

  When this configuration is loaded for the first time, the ~init.el~ is
  the file that is loaded. It looks like this:

  #+BEGIN_SRC emacs-lisp :tangle no
  ;; This file replaces itself with the actual configuration at first run.

  ;; We can't tangle without org!
  (require 'org)
  ;; Open the configuration
  (find-file (concat user-emacs-directory "init.org"))
  ;; tangle it
  (org-babel-tangle)
  ;; load it
  (load-file (concat user-emacs-directory "init.el"))
  ;; finally byte-compile it
  (byte-compile-file (concat user-emacs-directory "init.el"))
  #+END_SRC

  It tangles the org-file, so that this file is overwritten with the actual
  configuration.

  There is no reason to track the =init.el= that is generated; by running
  the following command =git= will not bother tracking it:

  #+BEGIN_SRC sh :tangle no
  git update-index --assume-unchanged init.el
  #+END_SRC

  If one wishes to make changes to the repo-version of =init.el= start
  tracking again with:

  #+BEGIN_SRC sh :tangle no
  git update-index --no-assume-unchanged init.el
  #+END_SRC

  The =init.el= should (after the first run) mirror the source blocks in
  the =init.org=. We can use =C-c C-v t= to run =org-babel-tangle=, which
  extracts the code blocks from the current file into a source-specific
  file (in this case a =.el=-file).

  To avoid doing this each time a change is made we can add a function to
  the =after-save-hook= ensuring to always tangle and byte-compile the
  =org=-document after changes.

  #+BEGIN_SRC emacs-lisp
  (defun tangle-init ()
    "If the current buffer is 'init.org' the code-blocks are
  tangled, and the tangled file is compiled."
    (when (equal (buffer-file-name)
                 (expand-file-name (concat user-emacs-directory "init.org")))
      ;; Avoid running hooks when tangling.
      (let ((prog-mode-hook nil))
        (org-babel-tangle)
        (byte-compile-file (concat user-emacs-directory "init.el")))))

  (add-hook 'after-save-hook 'tangle-init)
  #+END_SRC

  I'd like to keep a few settings private, so we load a =private.el= if it
  exists after the init-file has loaded.

  #+BEGIN_SRC emacs-lisp
  (add-hook
   'after-init-hook
   (lambda ()
     (let ((private-file (concat user-emacs-directory "private.el")))
       (when (file-exists-p private-file)
         (load-file private-file)))))
  #+END_SRC

* Packages
** Package Manager
   Load some additional repos to pull packages from
   
   #+BEGIN_SRC emacs-lisp
   (require 'package)
   (add-to-list 'package-archives 
     '("org" . "https://orgmode.org/elpa/") t)
   (add-to-list 'package-archives 
     '("melpa-stable" . "https://stable.melpa.org/packages/") t)

   (package-initialize)
   (package-refresh-contents)
   #+END_SRC

** Use-Package
   =use-package= makes it easy to install and lazy load packages

   #+BEGIN_SRC emacs-lisp
   (unless (package-installed-p 'use-package)
     (package-refresh-contents)
     (package-install 'use-package))

   (require 'use-package)
   #+END_SRC

* Global Setup
** Simplify yes-or-no

  #+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
  #+END_SRC

** Autosaves & Backup Files
   To reduce noise, put autosaves and backups into a single directory
   #+BEGIN_SRC emacs-lisp
   (defvar emacs-autosave-directory
     (concat user-emacs-directory "autosaves/")
     "This variable dictates where to put auto saves. It is set to a
     directory called autosaves located wherever your .emacs.d/ is
     located.")
   #+END_SRC

   Create the autosaves directory if it does not exist

   #+BEGIN_SRC emacs-lisp
   (when (not (file-exists-p emacs-autosave-directory))
     (message "Make directory: %s" emacs-autosave-directory)
     (make-directory emacs-autosave-directory))
   #+END_SRC
   

   Sets all files to be backed up and auto saved in a single directory.

   #+BEGIN_SRC emacs-lisp
   (setq backup-directory-alist
         `((".*" . ,emacs-autosave-directory))
         auto-save-file-name-transforms
         `((".*" ,emacs-autosave-directory t)))
   #+END_SRC

** Default Encoding
   Set =utf-8= as preferred coding system.

   #+BEGIN_SRC emacs-lisp
   (set-language-environment "UTF-8")
   #+END_SRC

** Emacs customizations
   Save customizaitons made through Emacs into their own file
   #+BEGIN_SRC emacs-lisp
   (setq custom-file (concat user-emacs-directory "custom.el"))
   (when (file-exists-p custom-file)
     (load custom-file))
   #+END_SRC

** E-mail address 
  Set my email based on login in name, pheely is only used for work
  
  #+BEGIN_SRC emacs-lisp
  (if (equal "pheely" user-login-name)
    (setq user-mail-address "pheely@amazon.com")
    (setq user-mail-address "paul@paulheely.com"))
  #+END_SRC

** No Tabs
   Tabs in source are *bad!*
   
   #+BEGIN_SRC emacs-lisp
   (setq-default indent-tabs-mode nil)
   (setq tab-width 2)
   #+END_SRC
   
   Indent then do completions
   
   #+BEGIN_SRC emacs-lisp
   (setq-default tab-always-indent 'complete)
   #+END_SRC
